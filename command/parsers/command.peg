Start
=Command+

Command
= cmd:Node+ ";\n" {return {type: "command", value: cmd}} /
cmd:Node+ ";" {return {type: "command", value: cmd}} / 
cmd:Node+ "\n" {return {type: "command", value: cmd}} /
cmd:Node+ {return {type: "command", value: cmd}}

/* High level types for presentation
*
*/

Node
= String/EmbeddedCommand/Word/Number/WhiteSpace

String
= [\"] charArray: DoubleCharArray [\"] {return {type: "string", value: charArray}} / 
[\'] charArray: SingleCharArray [\'] {return {type: "string", value: charArray}}

EmbeddedCommand
= [\{] cmd: Command [\}] {return {type: "command", value: cmd}}

Word
= letters: LetterArray {return {type: "word", value: letters}}

Number
= digitArray: DigitArray {return {type: "number", value: digitArray}}

WhiteSpace
= ws: _ {return {type: "whitespace", value: ws}}


/* Low level types for parsing definition
*
*/
DoubleCharArray
= chars:DoubleChar* { return chars.join(''); }

SingleCharArray
= chars:SingleChar* { return chars.join(''); }

DoubleChar
= !([\"] / [\\]) char:. { return char; }
/ [\\] sequence:EscapeSequence { return sequence; }

SingleChar
= !([\'] / [\\]) char:. { return char; }
/ [\\] sequence:EscapeSequence { return sequence; }

EscapeSequence
= [\']
/ [\"]
/ [\\]
/ [b]  { return "\b";   }
/ [f]  { return "\f";   }
/ [n] { return "\n";   }
/ [r]  { return "\r";   }
/ [t]  { return "\t";   }
/ [v]  { return "\x0B"; }

LetterArray
= letters: Letter+ {return letters.join("");}

Letter
= [A-Za-z]

DigitArray
= digits: Digit+ {return parseInt(digits.join(""));}

Digit
= [0-9]

WS
= [ \t]

_
= ws: WS+ {return ws.join("");}

